2장 자료형과 연산자
1절 변수
	선언이 필요없고 할당과 동시에 타입이 셋팅
	문자, 숫자, _로 변수명작성/숫자로 시작하거나 예약어는 사용불가
	다중 변수할당시 일괄 할당
	ex. a, b = 10, 20
2절 화면 i/o
	input()은 입력된 값을 문자로 반환
	print(출력 내용, sep=' ', end='\n')
3절 기본 자료형
	숫자형 : int, float, complex
		int값/int값=>실수
		지수형 표현(큰수, 작은수)은 => 실수
	문자형 : str
		문자열 연산 : +(연결) *(반복)
4절 formatting
	f"{age}살 {name}님 반갑습니다."
	"{}살 {}님 반갑습니다".format(age, name)
	"{[인덱스]:[공백대체문자][정렬방식][자릿수][타입]}".format(변수)

★ 정규표현식
1. 참조 : 위키백과
2. 간략한 문법 : 
    \d (숫자와 매치, [0-9]와 동일)
    \D (숫자가 아닌것)
    \w (영문자나 숫자, [a-zA-z0-9])
    \W (영문자나 숫자가 아닌 문자)
    . (문자 1개)
    \. (.의미)
    \- (-의미)
    {2, 4} (2~4번 반복) 앞의 수가 작아야 함.
    {4}    (4번 반복)
    {2,}   (2번 이상 반복)
    +      (1번 이상 반복)
    *      (0번 이상 반복)
    ?      (1번 있거나 아에 없거나)
    []     (또는)
    [a-zA-Z] (영어만 가능)
    [가-힣]  (한글만 가능)
    (  )     (괄호는 소괄호로 사용해야함)
3. 정규표현식 연습장 (https://regexr.com/)

    ex) 전화번호 : 010-9999-9999 02-000-0000 01099998888 
                   029998888 02)123-4567 010 1234 1234 010.1234.1234
    \d{2,3}[\-) .]?\d{3,4}[- .]?\d{4}
        - tel_pattern = r"[0-9]{2,3}[\-) .]?[0-9]{3,4}[- .]?[0-9]{4}"
    ex) 이메일 :  abc12@naver.com / abc123@0to7.co.kr
                     abc@한국.com             abv@ga_com
                    abc@ㅎㅋ.com
        - email_pattern = r"\w{3,}@[a-zA-Z0-9가-힣]+(\.[a-zA-Z]+){1,2}"
    \w{3,}@[a-zA-Z0-9가-힣]+\.[a-zA-Z]+(\.[a-zA-Z]+)?
    \w{3,}@[a-zA-Z0-9가-힣]+(\.[a-zA-Z]+){1,2}

---------------------------------------------------------------------------------------------------
파이썬 특징
변수는 다 객체로 저장됨. heap 메모리에 변수를 저장.
*파이썬의 변수는 객체의 주소값을 참조한다.*
출력시 , 쓰면 됨.

파이썬의 모든 변수는 값과 함수가 합쳐져 있다.

객체에 새로운 값이 할당될때마다 새로운 주소값이 할당된다.

-------------------------------------------------------------------------------------------------------
stream은 항상 입력, 출력이 나눠져 있다.
stream 을 빨대로 비유함.

python은 무조건 stream을 닫아야만 저장이 된다.


메모리는 8비트씩 저장이 된다.
1byte = 8bit

heap 메모리에 주소를 할당함.
모든 변수는 객체. 객체에 함수가 포함되어 있다.


객체(Object)와 인스턴스 -> 인스턴스는 클래스를 메모리에 올라 간 것을 뜻함.

{[인덱스]} -> 여기서 [ ] 대괄호는 있어도 되고 없어도 된다는 뜻.

2진수로 표현하는 곳에서 2진수를 사용하는 경우가 많다.
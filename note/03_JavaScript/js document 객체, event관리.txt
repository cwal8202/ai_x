[ 문서객체 추가 ]
1. 문서객체 추가
document.createElement (html태그 추가)
document.createTextNode (html태그의 text값 추가)

2. 문서객체 가져오기
document.getElementBy (Id, className, tagName, name)
document.querySelector ( css선택자로 가져오기 가능)

3. 문서객체 삭제하기
document.removeChild(태그 객체);

[ 이벤트 ] 
1. 이벤트모델 종류 : 
1) 인라인 이벤트모델 : <h1 onclick="함수명()">
2) 기본이벤트 모델: h1.onclick = function(){ };
3) 표준이벤트 모델: h1.addEventListener('이벤트종류', function(){ });

2. 이벤트 제거 : 
1) 기본모델 : this.onclick = null;  * 화살표함수는 this 불가.
2) 표준모델 : this.removeEventLIstener('이벤트종류', function명);
	function명을 기입해야 삭제 가능.

3. 이벤트 제한:
1) 기본모델 : return false; // 제한하는 이벤트의 return false;
2) 표준모델 : e.preventDefault // addEventListenr('click', e=>{}); 
	여기서 파라미터로 click이벤트를 받아 제한함.

4. event.keyCode, event.offsetX , Y
event 객체로 키보드 및 마우스 좌표 사용 가능.
event.keyCode = 아스키코드의 값이 반환됨.
event.offsetX = 브라우저 기준 마우스의 X좌표 반환함.
event.screenX = 스크린(모니터) 기준 마우스 X좌표 반환함.



------------------------------------------------------------------
innerHTML의 위험성,
addEventListner 관리하는 객체,

브라우저가 로딩 될때 HTML문서는 DOM에 저장된다.
<script>태그의 경우 자바스크립트엔진(v8)에 코드를 넘김.
그후 다시 HTML문서 DOM 저장한다.

js코드를 실행할때 window.onload를 하는 이유는 브라우저가
html,css가 모두 로드 한 후에 실행 하라는 의미. 그렇지 않으면
h1태그가 아직 로딩되어 있지 않는 상황에서 h1의 js코드가 먼저 실행되면 에러남.

**반복문 let, var 범위.